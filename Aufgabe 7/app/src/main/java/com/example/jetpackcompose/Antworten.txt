Aufgabe 6

 a) Welche Vorteile bieten Coroutinen in der Android Entwicklung und wie tragen sie dazu bei, asynchrone
 Aufgaben effizienter und benutzerfreundlicher zu gestalten?

 Antwort: Coroutinen sind eine effiziente Möglichkeit Operationen asynchron durchzuführen. Sie ermöglichen
 asynchrone Prozesse in einer leicht lesbaren und wartbaren Weise zu schreiben , vorallem durch suspend-Funktionen
 und mithilfe von await/async.
 Coroutinen verbessert die Effizient und Leistung und vermeiden UI-Blockaden. Durch Dispatcher
 können sie gezielt Ressourcen schonend einsetzen.Sie ermöglichen ebenfalls das Anhalten und Fortsetzen
 von Funktionen, was ebennfalls Ressourcen spart.

 b) Erkläre warum du dich für einen bestimmten Dispatcher in Aufgabe 2a) entschieden hast.

 Antwort: Ich habe den Dispatcher.IO verwendet, da er sich für E-/A-intensive Aufgaben am besten eignet.
 Er kümmert sich um Netzwerk-, Dateioperationen und Datenbankabfragen. In diesem Fall habe ich ihn verwendet, da
 es auf externe Daten wartet und keinen großen CPU-Aufwand erfordert.

 c) Nenne zwei praxisrelevante Anwendungsfälle, bei denen der Einsatz von Services sinnvoll ist. Erkläre kurz warum.

 Antwort: 1. Kontinuierliche Aufgaben im Hintergrund ermöglichen es, wichtige Prozesse wie Musikwiedergabe oder Standortverfolgung unabhängig vom UI-Lebenszyklus auszuführen.
          2. Kommunikation zwischen App-Komponenten sorgt für effiziente und zentrale Datenverarbeitung, wodurch die Zusammenarbeit verschiedener Teile der App verbessert wird.

d) Welche Vorteile bietet die Kombination von Services und Coroutinen? Kannst du ein Beispiel aus dem Code
der Wetter-App nennen, in dem beide miteinander kombiniert genutzt werden?

Antwort: Die Vorteile sind die : 1. Effiziente Hintergrundverarbeitung: Coroutinen erlauben zeitaufwendige Aufgaben wie Datenbank- oder Netzwerkoperationen ohne Blockierung.
                                 2. Thread-Verwaltung: Coroutinen vereinfachen die Verwaltung von Threads im Vergleich zu klassischen Ansätzen.
                                 3- UI-Reaktionsfähigkeit: Services laufen unabhängig, während Coroutinen Hintergrundarbeit effizient ausführen.
             Beispiel im Code: Methode fetchForecast

             suspend fun fetchForecast(city: String, apiKey: String): ForecastData? {
                                       return try {
                                           withContext(Dispatchers.IO) {
                                               val response = api.fetchForecast(city, apiKey)
                                               if (response.isSuccessful) {
                                                   response.body()
                                               } else {
                                                   Log.e("WeatherApiService", "Failed to fetch data: ${response.code()}")
                                                   null
                                               }
                                           }
                                       } catch (e: Exception) {
                                           Log.e("WeatherApiService", "Error fetching data: ${e.message}")
                                           null
                                       }
                                   }
